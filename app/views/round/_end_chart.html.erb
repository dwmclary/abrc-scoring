<div align="center" style="float:left">
    <h2> End Performance </h2>
    <div style="float:left;width:100px">
        <p><b>Best End </b> <b style="font-size:24px;color:#1E72AC"> <%=@total_scores.max%></b></p>
        <p><b>Worst End </b> <b style="font-size:24px;color:#1E72AC"> <%=@total_scores.min%></b></p>
    </div>    
<div id="end_bar_chart" style="width:550px;float:left">
</div>
</div>
<script type="text/javascript+protovis"> 
 
    var totaldata = <%=array_or_string_for_javascript @total_scores%>.map(parseFloat);
    var scores = <%=array_or_string_for_javascript @total_scores%>.map(parseFloat);
    var best_arrow = <%= array_or_string_for_javascript @end_scores.first%>.map(parseFloat);
    var worst_arrow = <%= array_or_string_for_javascript @end_scores.last%>.map(parseFloat);
    var data = pv.range(0, <%=@total_scores.size%>, 1).map(function(x) {
        return {x: x+1, y: scores[x]};
      });
      
    var best_arrow_data = pv.range(0, <%=@total_scores.size%>, 1).map(function(x) {
          return {x: x+1, y: best_arrow[x]};
    });
    
    var worst_arrow_data = pv.range(0, <%=@total_scores.size%>, 1).map(function(x) {
          return {x: x+1, y: worst_arrow[x]};
    });
    var paired_data = [data,best_arrow_data, worst_arrow_data];
    
    var w = 500,
        h = 300,
        x = pv.Scale.linear(data, function(d) d.x).range(0, w),
        y = pv.Scale.linear(0, 30).range(0, h);
        
    var i = -1;
 
    var vis = new pv.Panel().canvas("end_bar_chart")
        .width(w)
        .height(h)
        .bottom(20)
        .left(30)
        .right(10)
        .top(5);
 
        /* X-axis ticks. */
        vis.add(pv.Rule)
            .data(x.ticks(<%=@total_scores.size%>-1))
            .visible(function(d) d > 0)
            .left(x)
            .strokeStyle("#eee")
          .add(pv.Rule)
            .bottom(-5)
            .height(5)
            .strokeStyle("#000")
          .anchor("bottom").add(pv.Label)
            .text(x.tickFormat);

        /* Y-axis ticks. */
        vis.add(pv.Rule)
            .data(y.ticks(5))
            .bottom(y)
            .strokeStyle(function(d) d ? "#eee" : "#000")
          .anchor("left").add(pv.Label)
            .text(y.tickFormat);
            
        /* A panel for each data series. */
        var panel = vis.add(pv.Panel)
            .data(paired_data);
        

        /* The line. */
        var line = panel.add(pv.Line)
            .data(function(d) d)
            .left(function(d) x(d.x))
            .bottom(function(d) y(d.y))
            .interpolate("step-after")
            .lineWidth(3);

        var dot = line.add(pv.Dot)
            .visible(function() i >= 0)
            .data(function(d) [d[i]])
            .fillStyle(function() line.strokeStyle())
            .strokeStyle("#000")
            .size(20) 
            .lineWidth(1)
          .add(pv.Dot)
            .left(10)
            .bottom(function() this.parent.index * 12 + 10)
          .anchor("right").add(pv.Label)
            .text(function(d) d.y.toFixed(2));

            /* An invisible bar to capture events (without flickering). */
            vis.add(pv.Bar)
                .fillStyle("rgba(0,0,0,.001)")
                .event("mouseout", function() {
                    i = -1;
                    return vis;
                  })
                .event("mousemove", function() {
                    var mx = x.invert(vis.mouse().x);
                    i = pv.search(paired_data[0].map(function(d) d.x), mx);
                    i = i < 0 ? (-i - 2) : i;
                    return vis;
                  });

        vis.render();
 
</script>